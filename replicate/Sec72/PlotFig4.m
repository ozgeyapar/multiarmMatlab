% PlotFig4.m:
% PURPOSE: A macro with the code to:
%   1) Merge simulation replications generated by SimforFig4.m into a
%   single .mat file for each problem setup and each allocation rule 
%   (4x4=36 .mat files in total)
%   2) Generate four figures for each problem setup and save these as 
%   .fig and .eps 
%
% OUTPUTS: Generates 4x4 = 16 .mat files (4 policies, 4 problem setups), 
% four .fig files, four .eps files.
%
% WORKFLOW: Called in ReplicateFiguresRev1.m after defining sec62folder,
% calling SimforFig4.m and calling SimforFig1.m and PlotFig1.m (i.e. assumes
% that Figure 1 is already created, since same data is used here)

%% Merge data for each simulation replication to a single file for for each
%% allocation rule and each problem setup
alphaval = '100';
pval = '6';
names = {'cPDELower-tiekg-02', 'cPDELower-tiekg-04', 'cPDELower-TTVS-02', 'cPDELower-TTVS-04'};
for j = 1:size(names,2)
    for i = 1:NUMOFREPS
        load(strcat(sec72folder,'80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'-repnum-',num2str(i),'.mat'))
        mergedOC.allrule = X.allrule;
        mergedOC.parameters = X.parameters;
        mergedOC.detailed(i) = X.detailed(i);
    end  
    mymat = strcat(sec72folder,'merged-80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'.mat');
    save(mymat,'mergedOC');
end

alphaval = '100';
pval = '8';
names = {'cPDELower-tiekg-02', 'cPDELower-tiekg-04', 'cPDELower-TTVS-02', 'cPDELower-TTVS-04'};
for j = 1:size(names,2)
    for i = 1:NUMOFREPS
        load(strcat(sec72folder,'80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'-repnum-',num2str(i),'.mat'))
        mergedOC.allrule = X.allrule;
        mergedOC.parameters = X.parameters;
        mergedOC.detailed(i) = X.detailed(i);
    end  
    mymat = strcat(sec72folder,'merged-80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'.mat');
    save(mymat,'mergedOC');
end

alphaval = '16';
pval = '6';
names = {'cPDELower-tiekg-02', 'cPDELower-tiekg-04', 'cPDELower-TTVS-02', 'cPDELower-TTVS-04'};
for j = 1:size(names,2)
    for i = 1:NUMOFREPS
        load(strcat(sec72folder,'80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'-repnum-',num2str(i),'.mat'))
        mergedOC.allrule = X.allrule;
        mergedOC.parameters = X.parameters;
        mergedOC.detailed(i) = X.detailed(i);
    end  
    mymat = strcat(sec72folder,'merged-80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'.mat');
    save(mymat,'mergedOC');
end

alphaval = '16';
pval = '8';
names = {'cPDELower-tiekg-02', 'cPDELower-tiekg-04', 'cPDELower-TTVS-02', 'cPDELower-TTVS-04'};
for j = 1:size(names,2)
    for i = 1:NUMOFREPS
        load(strcat(sec72folder,'80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'-repnum-',num2str(i),'.mat'))
        mergedOC.allrule = X.allrule;
        mergedOC.parameters = X.parameters;
        mergedOC.detailed(i) = X.detailed(i);
    end  
    mymat = strcat(sec72folder,'merged-80alt-OC-alpha',alphaval,'-P',pval,'-c0-',names{j},'.mat');
    save(mymat,'mergedOC');
end

%% Generate the log(E[Opportunity Cost]) over number of samples plot
%% for alpha = 100/(M-1)^2 and P = 10^6
clear result
alpha = '100';
cost = '0';
p = '6';
pvalues = {'04', '02'};
NUMOFPS = size(pvalues,2);
names =  {'Equal', 'Random-pis1', 'Variance'};
lastind = 0;
for i = 1:size(names,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{i},'.mat'))
    result.rule(lastind+i) = mergedOC;
    lastind2 = lastind + i;
end
names = {'cPDELower-tiekg'};
for j = 1:size(pvalues, 2)
    load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'-',pvalues{j},'.mat'))
    result.rule(j+lastind2) = mergedOC;
    lastind3 = j+lastind2;
end
names =  {'cPDELower-TTVS'};
pvalues = {'04', '02'};
for j = 1:size(pvalues,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'-',pvalues{j},'.mat'))
    result.rule(lastind3+j) = mergedOC;
    lastind4 = lastind3+j;
end
names = {'cPDELower-tiekg'};
load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'.mat'))
result.rule(lastind4+1) = mergedOC;
names =  { 'Equal', 'Random','Variance', 'cPDELower with p = 0.4', 'cPDELower with p = 0.2', 'TTVS-Lower with p = 0.4', 'TTVS-Lower with p = 0.2', 'cPDELower'};
%names =  { 'cPDELower', 'cPDELower with p = 0.2', 'cPDELower with p = 0.4',  'Equal', 'Variance', 'Random', 'TTVS with p = 0.2', 'TTVS with p = 0.4'};
linS = {'-+r','-xm','-og','-sc','-dk',':*g',':>r','-.b'};
figurename = strcat(sec72folder,'sec72-alpha',alpha,'-P',p);
PlotLogOCCurves( result, names, 0, NUMOFREPS, NUMOFREPS, 100, linS,figurename)
PlotLogOCCurves( result, names, 1, NUMOFREPS, NUMOFREPS, 100, linS,figurename)

%% Generate the log(E[Opportunity Cost]) over number of samples plot
%% for alpha = 100/(M-1)^2 and P = 10^8
clear result
alpha = '100';
cost = '0';
p = '8';
pvalues = {'04', '02'};
NUMOFPS = size(pvalues,2);
names =  {'Equal', 'Random-pis1','Variance'};
lastind = 0;
for i = 1:size(names,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{i},'.mat'))
    result.rule(lastind+i) = mergedOC;
    lastind2 = lastind + i;
end
names = {'cPDELower-tiekg'};
for j = 1:size(pvalues, 2)
    load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'-',pvalues{j},'.mat'))
    result.rule(j+lastind2) = mergedOC;
    lastind3 = j+lastind2;
end
names =  {'cPDELower-secbest'};
pvalues = {'04', '02'};
for j = 1:size(pvalues,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-secbest-',names{1},'-',pvalues{j},'.mat'))
    result.rule(lastind3+j) = mergedOC;
    lastind4 = lastind3+j;
end
names = {'cPDELower-tiekg'};
load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'.mat'))
result.rule(lastind4+1) = mergedOC;
names =  { 'Equal', 'Random','Variance', 'cPDELower with p = 0.4', 'cPDELower with p = 0.2', 'TTVS-Lower with p = 0.4', 'TTVS-Lower with p = 0.2', 'cPDELower'};
%names =  { 'cPDELower', 'cPDELower with p = 0.2', 'cPDELower with p = 0.4',  'Equal', 'Variance', 'Random', 'TTVS with p = 0.2', 'TTVS with p = 0.4'};
linS = {'-+r','-xm','-og','-sc','-dk',':*g',':>r','-.b'};
figurename = strcat(sec72folder,'sec72-alpha',alpha,'-P',p);
PlotLogOCCurves( result, names, 0, NUMOFREPS, NUMOFREPS, 100, linS,figurename)
PlotLogOCCurves( result, names, 1, NUMOFREPS, NUMOFREPS, 100, linS,figurename)

%% Generate the log(E[Opportunity Cost]) over number of samples plot
%% for alpha = 16/(M-1)^2 and P = 10^6
clear result
alpha = '16';
cost = '0';
p = '6';
pvalues = {'04', '02'};
NUMOFPS = size(pvalues,2);
names =  {'Equal', 'Random-pis1', 'Variance'};
lastind = 0;
for i = 1:size(names,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{i},'.mat'))
    result.rule(lastind+i) = mergedOC;
    lastind2 = lastind + i;
end
names = {'cPDELower-tiekg'};
for j = 1:size(pvalues, 2)
    load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'-',pvalues{j},'.mat'))
    result.rule(j+lastind2) = mergedOC;
    lastind3 = j+lastind2;
end
names =  {'cPDELower-TTVS'};
pvalues = {'04', '02'};
for j = 1:size(pvalues,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-secbest-',names{1},'-',pvalues{j},'.mat'))
    result.rule(lastind3+j) = mergedOC;
    lastind4 = lastind3+j;
end
names = {'cPDELower-tiekg'};
load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'.mat'))
result.rule(lastind4+1) = mergedOC;
names =  { 'Equal', 'Random','Variance', 'cPDELower with p = 0.4', 'cPDELower with p = 0.2', 'TTVS-Lower with p = 0.4', 'TTVS-Lower with p = 0.2', 'cPDELower'};
%names =  { 'cPDELower', 'cPDELower with p = 0.2', 'cPDELower with p = 0.4',  'Equal', 'Variance', 'Random', 'TTVS with p = 0.2', 'TTVS with p = 0.4'};
linS = {'-+r','-xm','-og','-sc','-dk',':*g',':>r','-.b'};
figurename = strcat(sec72folder,'sec72-alpha',alpha,'-P',p);
PlotLogOCCurves( result, names, 0, NUMOFREPS, NUMOFREPS, 100, linS,figurename)
PlotLogOCCurves( result, names, 1, NUMOFREPS, NUMOFREPS, 100, linS,figurename)

%% Generate the log(E[Opportunity Cost]) over number of samples plot
%% for alpha = 16/(M-1)^2 and P = 10^8
clear result
alpha = '16';
cost = '0';
p = '8';
pvalues = {'04', '02'};
NUMOFPS = size(pvalues,2);
names =  {'Equal', 'Random-pis1','Variance'};
lastind = 0;
for i = 1:size(names,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{i},'.mat'))
    result.rule(lastind+i) = mergedOC;
    lastind2 = lastind + i;
end
names = {'cPDELower-tiekg'};
for j = 1:size(pvalues, 2)
    load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'-',pvalues{j},'.mat'))
    result.rule(j+lastind2) = mergedOC;
    lastind3 = j+lastind2;
end
names =  {'cPDELower-secbest'};
pvalues = {'04', '02'};
for j = 1:size(pvalues,2)
    load(strcat(sec72folder,'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-secbest-',names{1},'-',pvalues{j},'.mat'))
    result.rule(lastind3+j) = mergedOC;
    lastind4 = lastind3+j;
end
names = {'cPDELower-tiekg'};
load(strcat(sec72folder, 'merged-80alt-OC-alpha',alpha,'-P',p,'-c',cost,'-',names{1},'.mat'))
result.rule(lastind4+1) = mergedOC;
names =  { 'Equal', 'Random','Variance', 'cPDELower with p = 0.4', 'cPDELower with p = 0.2', 'TTVS-Lower with p = 0.4', 'TTVS-Lower with p = 0.2', 'cPDELower'};
%names =  { 'cPDELower', 'cPDELower with p = 0.2', 'cPDELower with p = 0.4',  'Equal', 'Variance', 'Random', 'TTVS with p = 0.2', 'TTVS with p = 0.4'};
linS = {'-+r','-xm','-og','-sc','-dk',':*g',':>r','-.b'};
figurename = strcat(sec72folder,'sec72-alpha',alpha,'-P',p);
PlotLogOCCurves( result, names, 0, NUMOFREPS, NUMOFREPS, 100, linS,figurename)
PlotLogOCCurves( result, names, 1, NUMOFREPS, NUMOFREPS, 100, linS,figurename)