ReplicateFiguresRev1.m: A macro with the code required to set up the path structure in matlab and generate a folder to save the simulation results and figures, and generate the figures and tables for correlated multiarm paper.
ExamplecallingcPDEs.m: A macro to show how to get EVI values estimated with cPDE, cPDELower and cPDEUpper, how to get the arm from cPDE, cPDELower and cPDEUpper allocation policies, and how to get whether cPDE, cPDELower and cPDEUpper stopping times stop or continue for an example problem. 
SetSolFiles.m: A macro to generate the standardized PDE solution
SetRandomVars.m: A macro to generate the random variables to used in the simulation replications for correlated multiarm paper.
SetPaths.m: Updates the matlab path variable so that pdestop, matlabKG and multiarmMatlab can all be accessed. Called in ExamplecallingcPDEs.m, ReplicateFiguresRev1.m, SetRandomVars.m, SetSolFiles.m
ExampleProblemSetup.m: A macro to show how to setup the 'parameters' input for functions in the policies folder. Called in ExamplePolicies.m
ExamplePolicies.m: A macro to show how to call some allocation polciies and stopping times for the example problem from ExampleProblemSetup.m.
ExampleProblemSetupwithPilot.m: A macro to show how to setup the 'parameters' and 'samplingparameters' inputs to simulate a problem that uses a given thetav and simulates a pilot data to estimate a prior distribution.

Sec62/SimforFig1.m: Runs simulation replications needed for Section 6.2, saves one .mat file for each replication. Called in ReplicateFiguresRev1.m
Sec62/PlotFig1.m: Merges simulation replications generated by SimforFig1.m into a single .mat file for each policy and problem, generates and saves four figures referred in Section 6.2, calculates mean difference and standard error matrices at period 100. Called in ReplicateFiguresRev1.m

Sec63/SimforTab1.m: Runs simulation replications needed for Section 6.3, saves one .mat file for each replication. Called in ReplicateFiguresRev1.m
Sec63/MergeandGenerateTable1.m: Merges simulation replications generated by SimforTab1.m into a single .mat file for each policy, computes the summary statistics across all simulation runs and saves summary statistics information as a .mat. Called in ReplicateFiguresRev1.m
Sec63/FindingtheFixedTforTable1.m: Finds the best fixed stopping time to be used with cKG1 allocation policy in the problem in Sec 6.3., saves simulation results and related graphs. Called in ReplicateFiguresRev1.m
Sec63/MergeReplicationsforTab1 (Function): Merges all replications for a policy (generated in SimforTab1.m) into a single .mat file, calculates and returns the summary statistics. Called in MergeandGenerateTable1.m

Sec64/SimforTab2.m: Runs simulation replications needed for Section 6.4, saves one .mat file for each replication. Called in ReplicateFiguresRev1.m
Sec64/MergeandGenerateTable2.m: Merges simulation replications generated by SimforTab2.m into a single .mat file for each policy, computes the summary statistics across all simulation runs and saves summary statistics information as a .mat. Called in ReplicateFiguresRev1.m
Sec64/GenerateFig2.m: Generate and plot GRP, Robust and Tilted priors for sample path 5 and for the problem outlined in Sec 6.4.
Sec64/FindingtheFixedTforTable2.m: Finds the best fixed stopping time to be used with cKG1 allocation policy in the problem in Sec 6.4., saves simulation results and related graphs. Called in ReplicateFiguresRev1.m
Sec64/MergeReplicationsforTab2 (Function): Merges all replications for a policy (generated in SimforTab2.m) into a single .mat file, calculates and returns the summary statistics. Called in MergeandGenerateTable2.m

Sec72/SimforFig4.m: Runs additional simulation replications needed for Section 7.2 (others are from Section 6.2), saves one .mat file for each replication. Called in ReplicateFiguresRev1.m
Sec72/PlotFig1.m: Merges simulation replications generated by SimforFig4.m into a single .mat file for each policy and problem, generates and saves four figures referred in Section 7.2. Called in ReplicateFiguresRev1.m, requires SimforFig1.m and PlotFig1.m to be called beforehand

AppC1/SimforTabEC2.m: Runs simulation replications needed for Section 7.2, saves one .mat file for each replication. Called in ReplicateFiguresRev1.m
AppC1/MergeandGenerateTableEC2.m: Merges simulation replications generated by SimforTabEC2.m into a single .mat file for each policy, computes the summary statistics across all simulation runs and saves summary statistics information as a .mat. Called in ReplicateFiguresRev1.m
AppC1/MergeReplicationsEC2 (Function): Merges all replications for a policy (generated in SimforTabEC2.m) into a single .mat file, calculates and returns the summary statistics. Called in MergeandGenerateTableEC2.m

AppC2andC3/PlotsAppC.m: Generate Figures EC1, EC2, EC3 and EC4. Called in ReplicateFiguresRev1.m
AppC2andC3/FuncAppCEVIandCompTime (Function): Generates figures that depict EVI and computation times for problems with 5:5:100 arms for allocation policies cKG1, cKG*, cPDELower, cPDEUpper, and cPDE. Called in PlotsAppC.m

AppD1/SimforAppD1.m: Generate the simulation results to generate figure Appendix D1 of correlated multiarms paper with a triangular shaped ground truth curve. Called in ReplicateFiguresRev1.m
AppD1/PlotFigEC5.m: Merges simulation replications generated by SimforAppD1.m into a single .mat file for each policy and problem, generates and saves the figure in Appendix D1. Called in ReplicateFiguresRev1.m

pdecorr/PDECRNsimplereward (Function): returns expected reward and 0 added samples to achieve it, using the (w, s) time scale. Useful as generic terminal condition.
pdecorr/PDECFCRNApproxValue (Function): find the best on can do in terms of maximizing expected reward for the undiscounted standardises stopping problem in the standardized (w,s) reverse time scale
pdecorr/CFCRNApproxBoundW (Function): Computes approximate size of lower/upper boundary for optimal stopping time for Bayesian bandit problem, as in Chick Gans Yapar (2018) with multiple correlated arms, positive sampling costs and zero discount rate. 

policies/AllocationcKG1 (Function): Returns the arm to be sampled based on the cKG-1 allocation policy (diff version). Called in DefineRules.m
policies/AllocationcKG1 (Function): Returns the arm to be sampled based on the cKG-1 allocation policy (ratio version). Called in DefineRules.m
policies/AllocationEqual (Function): Returns the arm to be sampled based on the Equal allocation policy. Called in DefineRules.m
policies/AllocationIndESPb (Function): Returns the arm to be sampled based on the ESP_b allocation policy. Called in DefineRules.m
policies/AllocationIndESPcapB (Function): Returns the arm to be sampled based on the ESP_B allocation policy. Called in DefineRules.m, ExamplePolicies
policies/AllocationcKGstar (Function): Returns the arm to be sampled based on the cKGstar allocation policy (diff version). Called in DefineRules.m
policies/AllocationcKGstarRatio (Function): Returns the arm to be sampled based on the cKGstar allocation policy (ratio version). Called in DefineRules.m
policies/AllocationcPDE (Function): Returns the arm to be sampled based on the cPDE allocation policy. Called in DefineRules.m, ExamplecallingcPDEs.m
policies/AllocationcPDELower (Function): Returns the arm to be sampled based on the cPDELower allocation policy. Called in DefineRules.m, ExamplecallingcPDEs.m, ExamplePolicies
policies/AllocationcPDELowerTTVS (Function): Returns the arm to be sampled based on the TTVS-Lower allocation policy. Called in DefineRules.m, ExamplePolicies
policies/AllocationcPDELowerUnif (Function): Returns the arm to be sampled based on the uniformly randomized cPDELower allocation policy. Called in DefineRules.m, ExamplePolicies
policies/AllocationcPDEUpperOpt (Function): Returns the arm to be sampled based on the cPDEUpper allocation policy with optimized weights. Called in DefineRules.m, ExamplePolicies
policies/AllocationcPDEUpperNoOpt (Function): Returns the arm to be sampled based on the cPDEUpper allocation policy with equal weights. Called in DefineRules.m, ExamplecallingcPDEs.m, ExamplePolicies
policies/AllocationEqual (Function): Returns the arm to be sampled based on the Variance allocation policy. Called in DefineRules.m
policies/AllocationTieBreaker (Function): Used to break the ties when an allocation policy estimates the same EVI for multiple arms. Called in all Allocation* files except AllocationEqual
policies/cKG1Dis (Function): Calculates the estimate of EVI for arm i using cKG1 approach for discounted problem. Called in AllocationcKG1.m, StoppingCorrelatedKG.m
policies/cKG1DisRatio (Function): Calculates the cKG1 index as benefit to cost ratio for discounted problem. Called in AllocationcKG1Ratio.m, StoppingCorrelatedKGRatio.m
policies/cKG1Undis (Function): Calculates the estimate of EVI for arm i using cKG1 approach for undiscounted problem. Called in PlotsAppC.m, AllocationcKG1.m, StoppingCorrelatedKG.m, FuncAppCEVIandCompTime.m
policies/cKG1UndisRatio (Function): Calculates the cKG1 index as benefit to cost ratio for undiscounted problem. Called in AllocationcKG1Ratio.m, StoppingCorrelatedKGRatio.m
policies/cPDEUndis (Function): Calculates the EVI estimated by cPDE approach for undiscounted problem. Called in PlotsAppC.m, ExamplecallingcPDEs.m, AllocationcPDE.m, StoppingPDE.m, StoppingPDEHeu.m, FuncAppCEVIandCompTime.m
policies/cPDELowerDis (Function): Calculates the EVI estimated by cPDELower approach for discounted problem. Called in AllocationcPDELower.m, AllocationcPDELowerUnif.m, StoppingPDELower.m
policies/cPDELowerUndis (Function): Calculates the EVI estimated by cPDELower approach for undiscounted problem. Called in PlotsAppC.m, ExamplecallingcPDEs.m, AllocationcPDELower.m, AllocationcPDELowerTTVS.m,AllocationcPDELowerUnif.m, StoppingPDEHeu.m, StoppingPDELower.m, FuncAppCEVIandCompTime.m
policies/cPDEUpperDis (Function): Calculates the EVI estimated by cPDEUpper approach for discounted problem. Called in AllocationcPDEUpperNoOpt.m, AllocationcPDEUpperOpt.m, StoppingPDEUpper.m, StoppingPDEUpperNoOpt.m
policies/cPDEUpperUndisNoOpt (Function): Calculates the EVI estimated by cPDEUpper approach with equal weights for undiscounted problem. Called in PlotsAppC.m, ExamplecallingcPDEs.m, AllocationcPDEUpperNoOpt.m, StoppingPDEHeu.m, StoppingPDEUpperNoOpt.m
policies/cPDEUpperUndisOpt (Function): Calculates the EVI estimated by cPDEUpper approach with optimized weights for undiscounted problem. Called in AllocationcPDEUpperOpt.m, StoppingPDEUpper.m
policies/cKGstarDis (Function): Calculates the estimate of EVI for arm i using cKG* approach for discounted problem. Called in AllocationTieBreaker.m, AllocationcKGstar.m, StoppingKGLower.m
policies/cKGstarDisRatio (Function): Calculates the cKG* index as benefit to cost ratio for discounted problem. Called in AllocationTieBreaker.m, AllocationcKGstarRatio.m, StoppingKGLowerRatio.m
policies/cKGStarUndis (Function): Calculates the estimate of EVI for arm i using cKG* approach for undiscounted problem. Called in PlotsAppC.m, AllocationTieBreaker.m, AllocationcKGstar.m, StoppingKGLower.m, cPDEUndis.m, FuncAppCEVIandCompTime.m
policies/cKGstarUndisRatio (Function): Calculates the cKG* index as benefit to cost ratio for undiscounted problem. Called in AllocationTieBreaker.m, AllocationcKGstarRatio.m, StoppingKGLowerRatio.m
policies/StoppingcKG1 (Function): Implements the stopping time that is based on correlated KG1 (diff version). Called in DefineRules.m 
policies/StoppingcKG1Ratio (Function): Implements the stopping time that is based on correlated KG1 (ratio version). Called in DefineRules.m 
policies/StoppingFixed (Function): Implements the fixed stopping time. Called in DefineRules.m 
policies/StoppingIndESPb (Function): Implements the stopping time that is based on ESP_b. Called in DefineRules.m 
policies/StoppingcKGstar (Function): Implements the stopping time that is based on correlated KG* (diff version). Called in DefineRules.m 
policies/StoppingcKGstarRatio (Function): Implements the stopping time that is based on correlated KG* (ratio version). Called in DefineRules.m 
policies/StoppingcPDE (Function): Implements the cPDE stopping time. Called in DefineRules.m 
policies/StoppingcPDEHeu (Function): Implements the cPDE stopping time with heuristic to speed it up. Called in DefineRules.m, ExamplecallingcPDEs.m, ExamplePolicies
policies/StoppingcPDELower (Function): Implements the cPDELower stopping time. Called in DefineRules.m, ExamplecallingcPDEs.m, ExamplePolicies
policies/StoppingcPDEUpperOpt (Function): Implements the cPDEUpper stopping time with optimized weights. Called in DefineRules.m, ExamplePolicies
policies/StoppingcPDEUpperNoOpt (Function): Implements the cPDEUpper stopping time with equal weights. Called in DefineRules.m, ExamplecallingcPDEs.m, ExamplePolicies

setup/CheckParameters (Function):  Checks the validity of parameters that is created by SetParametersFunc.m. Called in SetParametersFunc.m
setup/DefineRules.m: A macro to define funciton handles for allocation policies and stopping times as function handles. Called in Func80altOC.m, Func80altTC.m, FuncAppCEVIandCompTime.m, FuncAppDPowerCurveSeq.m, FuncSec64OC.m, FuncSec64TC.m
setup/SetParametersFunc (Function): Creates a struct array which includes the problem and simulation parameters. Called in Func80altOC.m, Func80altTC.m, FuncAppCEVIandCompTime.m, FuncAppDPowerCurveSeq.m, FuncSec64OC.m, FuncSec64TC.m, ExampleProblemSetup

tograph/CalculateandPlotCIofOC (Function): Calculate the mean error of difference and standard error of the difference at a given period between the opportunity cost of each policy simulated, and plot the mean difference and standard error of the difference between each policy pair. Used for  simulations that compare allocation policies when each is used with the same fixed stopping time. Called in PlotFig1.m
tograph/PlotLogOCCurves (Function): Plots the log(E[OC]) for each allocation policy and saves the plots as .fig and .eps files. Used for simulations that compare allocation policies when each is used with the same fixed stopping time. Called in PlotFig1.m, PlotFig4.m
tograph/PlotPowerCurve (Function): Plots the probability of correct selection (P(CS)) against the difference between the means of best and second best arms for each policy and saves the plot as .fig and .eps files. Called in PlotFigEC5.m, SimforAppD1.m

tools/getybar (Function): Calculates mean of samples (ybar) from the posterior of i at t+tau. Called in nowhere
tools/logPsifunc (Function): Computes log(E[(Z-s)^+]) = log(normpdf(s)-s*(1-normcdf(s))) for a scalar positive s. Called in cKG1DisRatio.m, cKG1UndisRatio.m, cKGstarDisRatio.m, cKGstarDisRatio.m, cKGstarUndisRatio.m, cKGstarUndisRatio.m
tools/logvarfixedbeta (Function): Returns the log of the variance of mu_i^(t+\betavar)-mu_i^t for a fixed betavar. Called in cKG1DisRatio.m, cKG1UndisRatio.m, cKGstarDisRatio.m, cKGstarDisRatio.m, cKGstarUndisRatio.m, cKGstarUndisRatio.m
tools/Psifunc (Function): Calculates  E[(Z-s)^+] = normpdf(s) - s*(1-normcdf(s)) for a scalar positive s. Called in cKG1Dis.m, cKG1Undis.m, cKGstarDis.m, cKGstarDis.m, cKGstarUndis.m, cKGstarUndis.m
tools/SherWood (Function): Computes inv(A + uv'). Called in nowhere
tools/SortAlternatives (Function): Reorders both vectors so that b is in ascending order, and removes elements with duplicate b values. Called in TransformtoLinearVersion.m
tools/TransformtoLinearVersion (Function): Converts expected maximum of posterior means to the form of a{g(0)}+\b{g(0)} Z_i^T + \sum_{l=1}^{Mprime-1} (b{l+1}-b{l}) (-|d{l}|+Z_i^T)^+ where g(0) is the current maximum and Z_i^T is a random variable. Called in PlotsAppC.m, cKG1Dis.m, cKG1DisRatio.m, cKG1Undis.m, cKG1UndisRatio.m, cKGstarDis.m, cKGstarDisRatio.m, cKGstarUndis.m, cKGstarUndisRatio.m, cPDELowerDis.m, cPDELowerUndis.m, cPDEUndis.m, cPDEUpperDis.m, cPDEUpperUndisNoOpt.m, cPDEUpperUndisOpt.m, FuncAppCEVIandCompTime.m
tools/varfixedbeta (Function): Returns the variance of mu_i^(t+\betavar)-mu_i^t for a fixed betavar. Called in cKG1Dis.m, cKG1DisRatio.m, cKG1Undis.m, cKG1UndisRatio.m, cKGstarDis.m, cKGstarDis.m, cKGstarDisRatio.m, cKGstarDisRatio.m, cKGstarUndis.m, cKGstarUndis.m, cKGstarUndisRatio.m, cKGstarUndisRatio.m

sim/AssignRuleNames (Function): Generates a name for allocation policy or stopping time that summarizes the tie breaking options and other details. Called in Func80altOC.m, FuncSec64OC.m, SimOneRepPilotEachandSave.m, SimOneRepPilotEachandSave.m, SimOneRepandSave.m, SimRepsSeq.m
sim/BayesianUpdate (Function): Updates Multivariate Normal Distribution prior when we sample from arm i and obtain sample. Called in Copy_of_PlotsAppC.m, PlotsAppC.m, ExamplePolicies.m, ExamplecallingcPDEs.m, FuncAppCEVIandCompTime.m, SimOneRepAllocHelper.m, SimOneRepFullPolicyHelper.m
sim/GPRFit (Function): Implements the 'Fit' stage of Algorithm 2 of Chick, Gans, Yapar (2020). Called in SimPilotandDetPrior.m
sim/GPRAltFit (Function): Implements the 'Alternative Fit' stage of Algorithm 2 of Chick, Gans, Yapar (2020). Called in SimPilotandDetPrior.m
sim/SimPilotandDetPriorSec64 (Function): Simulates a pilot dose-response data from the true theta and actual sampling variance, uses this data to estimate a prior distribution using Algorithm 2 of Chick, Gans, Yapar (2020), modifies the estimated prior distribution as 'robust' or 'tilted' if specified in samplingparameters.priortype. Called in FuncSec64OC.m, SimOneRepPilotEachandSave.m
sim/Func80altOC (Function): Runs one simulation replication for a given allocation policy with a given fixed sample size for the problem in Section 6.2 of Chick, Gans, Yapar (2020) and saves the results to a .mat file. Called in SimforFig1.m, SimforFig4.m, FindingtheFixedTforTable1.m
sim/SimOneRepAllocHelper (Function): Runs one simulation replication for a given allocation policy with a given fixed sample size for given problem parameters. Called in Func80altOC.m, FuncSec64OC.m.
sim/FuncSec64OC (Function): Runs one simulation replication for a given allocation policy with a given fixed sample size for the problem in Section 6.4 of Chick, Gans, Yapar (2020) and saves the results to a .mat file. Called in FindingtheFixedTforTable2.m
sim/Func80altTC (Function): Runs one simulation replication for a given allocation policy with given stopping time for the problem in Section 6.3 of Chick, Gans, Yapar (2020) and saves the results to a .mat file. Called in SimforTab1.m, SimforTabEC2.m
sim/SimOneRepFullPolicyHelper (Function): Runs one simulation replication for a given allocation policy and a given stopping time for given problem parameters. Called in Func80altTC.m, FuncSec64TC.m
sim/FuncSec64TC (Function): Runs one simulation replication for a given allocation policy and a given stopping time for the problem in Section 6.4 of Chick, Gans, Yapar (2020) and saves the results to a .mat file. Called in FindingtheFixedTforTable2.m, SimforTab2.m 
sim/FuncAppCEVIandCompTime (Function): Generates figures that depict EVI and computation times for problems with 5:5:100 arms for allocation policies cKG1, cKG*, cPDELower, cPDEUpper, and cPDE. Called in PlotsAppC.m
sim/FuncAppDPowerCurveSeq (Function): Runs n simulation replications for a given allocation policy and stopping time for a problem with a triangular grount truth as in Section D of Chick, Gans, Yapar (2020). Called in SimforAppD1.m
sim/TrueMeanCreator: Generates the ground truth to be used in the simulation replication based on problem parameters. Called in Func80altOC.m, Func80altTC.m, FuncAppCEVIandCompTime.m, FuncAppDPowerCurveSeq.m, FuncSec64OC.m, FuncSec64TC.m
sim/SimulationSummary: Calculates the summary statistics across multiple simulation replications. Called in MergeReplicationsEC2.m, MergeReplicationsforTab1.m, MergeReplicationsforTab2.m, FuncAppDPowerCurveSeq.m

